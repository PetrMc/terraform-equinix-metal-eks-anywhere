#!/usr/bin/env bash

set -xo pipefail

ADMIN_IP='${admin_ip}'
NETMASK='${netmask}'
VLAN_ID='${vlan_vnid}'
CIDR='${cidr}'

install_kubectl() {
	snap install kubectl --channel=1.23 --classic
}

install_docker() {
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	update_apt
	DEBIAN_FRONTEND=noninteractive apt install -y apt-transport-https ca-certificates curl gnupg-agent gnupg2 software-properties-common docker-ce docker-ce-cli containerd.io
}

install_docker_compose() {
	curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
}

update_apt() (
	apt update
	DEBIAN_FRONTEND=noninteractive apt --yes --force-yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
)

restart_docker_service() (
	service docker restart
)

# setup_layer2_network_hybrid_bonded
# https://metal.equinix.com/developers/docs/layer2-networking/hybrid-bonded-mode/
setup_layer2_network_hybrid_bonded() {
	ip link add link bond0 name bond0.$VLAN_ID type vlan id $VLAN_ID
	ip addr add $ADMIN_IP/$CIDR dev bond0.$VLAN_ID
	ip link set dev bond0.$VLAN_ID up

	cat <<EOT >> /etc/network/interfaces
auto bond0.$VLAN_ID
iface bond0.$VLAN_ID inet static
    pre-up sleep 5
    address $ADMIN_IP
    netmask $NETMASK
    vlan-raw-device bond0
EOT
}

main() (
    update_apt
    install_kubectl
	install_docker
	install_docker_compose
	restart_docker_service
	setup_layer2_network_hybrid_bonded
)

main
